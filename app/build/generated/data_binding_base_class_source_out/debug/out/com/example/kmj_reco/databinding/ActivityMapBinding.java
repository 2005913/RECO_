// Generated by view binder compiler. Do not edit!
package com.example.kmj_reco.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.kmj_reco.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMapBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView base;

  @NonNull
  public final Button btnSearch;

  @NonNull
  public final EditText editText;

  @NonNull
  public final ImageView imageView13;

  @NonNull
  public final ImageView imageView9;

  @NonNull
  public final TitleBarBinding titleBar;

  private ActivityMapBinding(@NonNull RelativeLayout rootView, @NonNull ImageView base,
      @NonNull Button btnSearch, @NonNull EditText editText, @NonNull ImageView imageView13,
      @NonNull ImageView imageView9, @NonNull TitleBarBinding titleBar) {
    this.rootView = rootView;
    this.base = base;
    this.btnSearch = btnSearch;
    this.editText = editText;
    this.imageView13 = imageView13;
    this.imageView9 = imageView9;
    this.titleBar = titleBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.base;
      ImageView base = rootView.findViewById(id);
      if (base == null) {
        break missingId;
      }

      id = R.id.btn_search;
      Button btnSearch = rootView.findViewById(id);
      if (btnSearch == null) {
        break missingId;
      }

      id = R.id.editText;
      EditText editText = rootView.findViewById(id);
      if (editText == null) {
        break missingId;
      }

      id = R.id.imageView13;
      ImageView imageView13 = rootView.findViewById(id);
      if (imageView13 == null) {
        break missingId;
      }

      id = R.id.imageView9;
      ImageView imageView9 = rootView.findViewById(id);
      if (imageView9 == null) {
        break missingId;
      }

      id = R.id.title_bar;
      View titleBar = rootView.findViewById(id);
      if (titleBar == null) {
        break missingId;
      }
      TitleBarBinding binding_titleBar = TitleBarBinding.bind(titleBar);

      return new ActivityMapBinding((RelativeLayout) rootView, base, btnSearch, editText,
          imageView13, imageView9, binding_titleBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
